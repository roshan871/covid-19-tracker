{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fe84296.chunk.js","sourcesContent":["import React from 'react';\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\n\n function InfoBox({ title, cases, isRed, active, total, ...props}) {\n    return (\n        <Card \n        onClick={props.onClick} \n        className={`infoBox ${active && \"infoBox--selected\"} ${\n            isRed && \"infoBox--red\"\n        }`}>\n            <CardContent>\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\nexport default InfoBox;\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\", //opacity of the border\n      multiplier: 300, //Size of the circle\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 250,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 200,\n    },\n  };\nexport const sortData = (data) => {\n    let sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n        if(a.cases > b.cases){\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n    return sortedData;\n};\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n//Draw circle ont the map with interactive tooltip\nexport const showDataOnMap = (data, casesType='cases') => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div\n                        className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}></div>\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">\n                        Cases: {numeral(country.cases).format(\"0,0\")}\n                    </div>\n                    <div className=\"info-recovered\">\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\n                    </div>\n                    <div className=\"info-deaths\">\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\n                    </div>\n                </div>\n            </Popup>\n        </Circle>\n       \n\n    ))\n)\n","import React from 'react'\nimport './Map.css';\nimport { MapContainer as LeafletMap, TileLayer } from 'react-leaflet';\nimport { showDataOnMap } from './util';\n\n\nexport default function Map({countries, casesType, center, zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n                />\n                {/* Loop through the countries and draw circle on the screen */}\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n","import numeral from 'numeral';\nimport React from 'react'\nimport \"./Table.css\";\n// import numeral from \"numeral\";\n\nfunction Table({ countries}) {\n    return (\n        <div className=\"table\">\n         {countries.map(({country, cases}) =>(\n             <tr>\n                 <td>{country}</td>\n                 <td>\n                    <strong>{numeral(cases).format('0,0')}</strong>\n                 </td>\n             </tr>\n         ))}\n            \n        </div>\n    )\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport \"./LineGraph.css\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n        maintainAspectRatio: false,\n        tooltips: {\n            mode: \"index\",\n            intersect: false,\n            callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n            },\n        },\n        scales: {\n            xAxes: [\n              {\n                type: \"time\",\n                time: {\n                  format: \"MM/DD/YY\",\n                  tooltipFormat: \"ll\",\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  display: false,\n                },\n                ticks: {\n                  // Include a dollar sign in the ticks\n                  callback: function (value, index, values) {\n                    return numeral(value).format(\"0a\");\n                  },\n                },\n              },\n            ],\n          }\n        },\n    };\n\n    const buildChartData = (data, casesType=\"cases\") => {\n      let chartData = [];\n      let lastDataPoint;\n      for (let date in data.cases) {\n        if (lastDataPoint) {\n          let newDataPoint = {\n            x: date,\n            y: data[casesType][date] - lastDataPoint,\n          };\n          chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n      }\n      return chartData;\n    };\n\n    \nfunction LineGraph(casesType='cases') {\n    const [data, setData] = useState({});\n    \n      useEffect(() => {\n        const fetchData = async () => {\n          await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then((response) => {\n              return response.json();\n            })\n            .then((data) => {\n              let chartData = buildChartData(data, \"cases\");\n              setData(chartData);\n              console.log(chartData);\n              // buildChart(chartData);\n            });\n        };\n    \n        fetchData();\n      }, []);\n    return (\n        <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n    );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { MenuItem, FormControl, Select, Card, CardContent} from '@material-ui/core';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  },[])\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) =>{\n        const countries = data.map((country) => (\n          {\n            name: country.country,            // United States, United Kingdom\n            value: country.countryInfo.iso2, //UK, US, FR\n          }));\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      })\n    }\n    getCountriesData();\n  }, [])\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url = countryCode === \"worldwide\"\n     ? \"https://disease.sh/v3/covid-19/all\"\n     :`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n     await fetch(url)\n     .then(response => response.json())\n     .then(data => {\n      setInputCountry(countryCode);       //All of the data \n      setCountryInfo(data) ;         //from the country response\n      setMapCenter([data.countryInfo.lat, data.countryInfo.lng]);\n      setMapZoom(4);\n     })\n  }\n  console.log(\"COUNTRY INFO >>>\", countryInfo)\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <h1>COVID-19 TRACKER</h1>\n        <FormControl className=\"app__dropdown\">\n        <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n        </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType(\"cases\")}\n            title=\"Corona virus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox \n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType(\"recovered\")}\n            title=\"Recovered\" \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox \n            isRed\n            active={casesType === \"\"}\n            onClick={e => setCasesType(\"deaths\")}\n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter} \n          zoom={mapZoom}\n         />\n      </div>\n      <Card className=\"app_right\">\n      <CardContent>\n        <h3>Live cases by country</h3>\n        <Table countries={tableData} />\n        <h3>Worldwide new {casesType}</h3>\n        <LineGraph casesType={casesType} />\n\n      </CardContent>\n      </Card>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}