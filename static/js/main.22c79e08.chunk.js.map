{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","Map","countries","zoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22c79e08.chunk.js","sourcesContent":["import React from 'react';\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\n\n function InfoBox({ title, cases, total}) {\n    return (\n        <Card className=\"infoBox\">\n            <CardContent>\n            {/* Title */}\n            <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\n            {/* +120k number of cases */}\n            <h2 className=\"infoBox__cases\">{cases}</h2>\n            {/* 1.2M Total */}\n            <Typography className=\"infoBox__total\" color=\"textSecondary\">\n            {total} Total\n            </Typography>\n\n                \n            </CardContent>\n        </Card>\n    )\n}\nexport default InfoBox;\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\", //opacity of the border\n      multiplier: 300, //Size of the circle\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 250,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 200,\n    },\n  };\nexport const sortData = (data) => {\n    let sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n        if(a.cases > b.cases){\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n    return sortedData;\n};\n//Draw circle ont the map with interactive tooltip\nexport const showDataOnMap = (data, casesType='cases') => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n            <div className=\"info-container\">\n                <div\n                    className=\"info-flag\"\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}></div>\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">\n                    Cases: {numeral(country.cases).format(\"0,0\")}\n                </div>\n                <div className=\"info-recovered\">\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\n                </div>\n                <div className=\"info-deaths\">\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\n                </div>\n                </div>\n            </Popup>\n        </Circle>\n       \n\n    ))\n)\n","import React from 'react'\nimport './Map.css';\nimport { MapContainer as LeafletMap, TileLayer } from 'react-leaflet';\nimport { showDataOnMap } from './util';\n\n\nexport default function Map({countries, casesType, center, zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n                />\n                {/* Loop through the countries and draw circle on the screen */}\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n","import React from 'react'\nimport \"./Table.css\";\n\nfunction Table({ countries}) {\n    return (\n        <div className=\"table\">\n         {countries.map(({country, cases}) =>(\n             <tr>\n                 <td>{country}</td>\n                 <td><strong>{cases}</strong></td>\n             </tr>\n         ))}\n            \n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport \"./LineGraph.css\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n        maintainAspectRatio: false,\n        tooltips: {\n            mode: \"index\",\n            intersect: false,\n            callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n            },\n        },\n        scales: {\n            xAxes: [\n              {\n                type: \"time\",\n                time: {\n                  format: \"MM/DD/YY\",\n                  tooltipFormat: \"ll\",\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  display: false,\n                },\n                ticks: {\n                  // Include a dollar sign in the ticks\n                  callback: function (value, index, values) {\n                    return numeral(value).format(\"0a\");\n                  },\n                },\n              },\n            ],\n          }\n        },\n    };\n\n  \n\n    \nfunction LineGraph(casesType) {\n    const [data, setData] = useState({});\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\n    const buildChartData = (data, casesType=\"cases\") => {\n        let chartData = [];\n        let lastDataPoint;\n        for (let date in data.cases) {\n          if (lastDataPoint) {\n            let newDataPoint = {\n              x: date,\n              y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n          }\n          lastDataPoint = data[casesType][date];\n        }\n        return chartData;\n      };\n   \n      useEffect(() => {\n        const fetchData = async () => {\n          await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then((response) => {\n              return response.json();\n            })\n            .then((data) => {\n              let chartData = buildChartData(data, \"cases\");\n              setData(chartData);\n              console.log(chartData);\n              // buildChart(chartData);\n            });\n        };\n    \n        fetchData();\n      }, []);\n    return (\n        <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n    );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { MenuItem, FormControl, Select, Card, CardContent} from '@material-ui/core';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  },[])\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) =>{\n        const countries = data.map((country) => (\n          {\n            name: country.country,            // United States, United Kingdom\n            value: country.countryInfo.iso2, //UK, US, FR\n          }));\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      })\n    }\n    getCountriesData();\n  }, [])\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url = countryCode === \"worldwide\"\n     ? \"https://disease.sh/v3/covid-19/all\"\n     :`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n     await fetch(url)\n     .then(response => response.json())\n     .then(data => {\n      setInputCountry(countryCode);       //All of the data \n      setCountryInfo(data) ;         //from the country response\n      setMapCenter([data.countryInfo.lat, data.countryInfo.lng]);\n      setMapZoom(4);\n     })\n  }\n  console.log(\"COUNTRY INFO >>>\", countryInfo)\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <h1>COVID-19 TRACKER</h1>\n        <FormControl className=\"app__dropdown\">\n        <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n        </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n           title=\"Corona virus cases\"\n            cases={countryInfo.todayCases} \n            total={countryInfo.cases}/>\n          <InfoBox \n          title=\"Recovered\" \n          cases={countryInfo.todayRecovered} \n          total={countryInfo.recovered}\n          />\n          <InfoBox \n          title=\"Deaths\" \n          cases={countryInfo.todayDeaths} \n          total={countryInfo.deaths}/>\n        </div>\n        <Map\n        countries={mapCountries}\n        center={mapCenter} \n        zoom={mapZoom}\n         />\n      </div>\n      <Card className=\"app_right\">\n      <CardContent>\n        <h3>Live cases by country</h3>\n        <Table countries={tableData} />\n        <h3>Worldwide new cases</h3>\n        <LineGraph casesType={'cases'} />\n\n      </CardContent>\n      </Card>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}